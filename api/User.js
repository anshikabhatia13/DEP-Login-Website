const express = require("express");
const router = express.Router();
//mongoDB user model
const User = require("./../models/User");

const UserVerification = require("./../models/UserVerification");
const nodemailer = require("nodemailer");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config();

//password handler
const bcrypt = require("bcrypt");

//path for static verified page
const path = require("path");

const { error } = require("console");


const { createTransport } = require('nodemailer');

const transporter = createTransport({ //it will carry the email 
    host: "smtp-relay.sendinblue.com",
    port: 587,
    auth: {
        user: "dep.p03.2024@gmail.com",
        pass: "xsmtpsib-6b29f1272c05632003314cbce5f6cb6cfc5195cebc247e569f129c3a64beafd9-zDhHMgZ9jwLxKGBA",
    },
});



transporter.verify((error, success) => {
    if (error) {
        console.log(error);
    } else {
        console.log("Ready for messages");
        console.log(success);
    }
});
// check start



router.post("/signup", async (req, res) => {
    let { name, email, phone,address } = req.body;
    // name = name.trim();
    // email = email.trim();
    // phone = phone.trim();
    // address = address.trim();
    // Check if email is already registered
    console.log('Received data from frontend:', req.body); // recieved from frontend

    const existingUser = await User.findOne({ email });

    if (existingUser) {
        // Check if the existing user is already verified
        if (existingUser.verified) {
            res.json({
                status: "FAILED",
                message: "Email is already registered and verified",
            });
        } else {
            res.json({
                status: "FAILED",
                message: "Email is already registered but not verified. Check inbox!",
            });
        }
    } else if (name === "" || email === "" || phone === "" || address === "") {
        res.json({
            status: "FAILED",
            message: "Empty input field",
        });
    } else if (!/^[a-zA-Z ]*$/.test(name)) {
        res.json({
            status: "FAILED",
            message: "Invalid name entered",
        });
    } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
        res.json({
            status: "FAILED",
            message: "Invalid email entered",
        });
    }

    else {
        // Generate OTP
       
        const otp = generateOTP();

        // Store the OTP in the user model
        const newUser = new User({
            name,
            email,
            otp: otp.toString(), // Storing hashed OTP for verification
            address,
            phone,
            // verified: false,
        });

        newUser
            .save()
            .then((result) => {
                // Handle email verification
                sendVerificationEmail(result, otp, res);
            })
            .catch((err) => {
                res.json({
                    status: "FAILED",
                    message: "An error occurred while saving user account!",
                });
            });
    }
});

const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000);
};

//send verification email function
const sendVerificationEmail = ({ _id, email }, otp, res) => {
    //id is generated by mongoDB
    //url to be used in the email
    const currentUrl = "http://localhost:5000/";
    const uniqueString = uuidv4() + _id;
    //mail options
    const mailOptions = {
        from: process.env.AUTH_EMAIL,
        to: email,
        subject: "Verify Your Email",
        html: `<p>Verify your email address to complete the signup and login into your account.</p>
            <p>This OTP expires in <b>5 minutes</b>.</p>
            <p>Enter this OTP: <strong>${otp}</strong> on the verification page.</p>`,
};


    //hash the unique string into uservarification collection
    const saltRounds = 10;
    bcrypt
        .hash(uniqueString, saltRounds)
        .then((hashedUniqueString) => {
            // set values in userverification collection
            const newVerification = new UserVerification({ //create a new userverification record
                userId: _id,
                uniqueString: hashedUniqueString,
                createdAt: Date.now(),
                expiresAt: Date.now() + 21600000,
                //added 6 hours to the current time in milliseconds
            });
    
            newVerification
                .save()
                .then(() => {
                    transporter
                        .sendMail(mailOptions)
                        .then(() => {
                            //email sent and userverification record saved
                            res.json({
                                status: "PENDING",      //still pending
                                message: "Verification email sent!",
                            });

                        })
                        .catch((error) => {
                            console.log(error);
                            res.json({
                                status: "FAILED",
                                message: "Verification email failed!",
                            });

                        })
                })
                .catch((error) => {
                    console.log(error);
                    res.json({
                        status: "FAILED",
                        message: "Couldn't save verification email data!",
                    });
                })
        })
        .catch(() => {
            //first error to be handled
            res.json({
                status: "FAILED",
                message: "An error occurred while hashing email data!",
            });
        })
};

router.get("/verified", (req, res) => {
    res.sendFile(path.join(__dirname, "./../views/verified.html"));
})

router.post("/verify-otp", async (req, res) => {
    try {
        const { uid, otp } = req.body;

        // Directly check if the stored hashed OTP matches the provided OTP
        const user = await User.findOne({ otp });

        if (!user) {
            return res.json({
                status: "FAILED",
                message: "Invalid OTP",
            });
        }

        if (user.expiresAt < Date.now()) {
            return res.json({
                status: "FAILED",
                message: "OTP expired",
            });
        }

        // OTP is valid, update user as verified
        // await User.updateOne({ _id: user._id }, { verified: true });

        res.json({
            status: "SUCCESS",
            message: "Account verified successfully!",
        });
    } catch (err) {
        console.error(err);
        res.json({
            status: "FAILED",
            message: "An error occurred",
        });
    }
});



router.post("/signin", (req, res) => {

    // gernerate the otp and send it to the user
    let { email } = req.body;
    // console.log('Received data login:', email, /*password*/); // recieved from frontend
    // email = email.trim();
    console.log('Received data login:', req.body); // recieved from frontend
    // password = password.trim();

    if (email == "") {
        res.json({
            status: "FAILED",
            message: "Empty credentials supplied",
        });
    } else {
        User.find({ email })
            .then((data) => {

                if (data.length) {
                    otp = generateOTP();
                    User.updateOne({ _id: data[0]._id }, { otp: otp.toString(), createdAt: Date.now(), expiresAt: Date.now() + 300000 })
                        .then((result) => {
                            console.log(`Updated OTP successfully for user with _id: ${data[0]._id}`);
                            const email_id = { email: data[0].email,_id : data[0]._id};
                            sendVerificationEmail(email_id, otp, res);
                            // You can handle the result if needed
                        })
                        .catch((error) => {
                            console.error(`Error updating OTP for user with _id: ${data[0]._id}`, error);
                            // Handle the error
                            res.json({
                                status: "FAILED",
                                message: "can't update otp",
                            });
                        });
                } else {
                    console.log("Invalid Credentials entered!");
                    res.json({
                        status: "FAILED",
                        message: "Invalid Credentials entered!",
                    });
                    console.log(res.status);
                }
            })
            .catch((err) => {
                res.json({
                    status: "FAILED",
                    message: "An error occured while checking for existing user",
                });
            });
    }
});
module.exports = router;
